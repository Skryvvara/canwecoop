import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useAuth, useDebounce } from "@/hooks";
import {
  NumberParam,
  StringParam,
  useQueryParams,
  withDefault,
} from "use-query-params";
import { CommaArrayParam, toggle } from "@/lib";
import { Game } from "@/types";
import { ApiError, GameGrid } from "@/components";
import { useQuery } from "react-query";
import { useEffect, useState } from "react";
import { ArrowLeft, ArrowRight } from "react-feather";
import { getGames, GamesMetaData, getGamesMetaData } from "@/api";

export default function Home() {
  const { user } = useAuth();
  const [showFilter, setShowFilter] = useState(false);
  const [games, setGames] = useState<Game[]>([]);
  const [query, setQuery] = useQueryParams({
    name: withDefault(StringParam, ""),
    page: withDefault(NumberParam, 1),
    size: withDefault(NumberParam, 24),
    categories: withDefault(CommaArrayParam, [] as string[]),
    genres: withDefault(CommaArrayParam, [] as string[]),
    friends: withDefault(CommaArrayParam, [] as string[]),
  });
  const debouncedNameQuery = useDebounce(query.name, 300);

  const gameData = useQuery({
    queryKey: ["@games", query, debouncedNameQuery],
    queryFn: async () => getGames(query, debouncedNameQuery),
    keepPreviousData: true,
    refetchOnWindowFocus: false,
  });

  const metaData = useQuery<GamesMetaData>({
    queryKey: ["@meta"],
    queryFn: async () => getGamesMetaData(),
    keepPreviousData: true,
    refetchOnWindowFocus: false,
  });

  useEffect(() => {
    if (gameData.data && !gameData.isLoading) {
      if (gameData.data.games && !gameData.isPreviousData) {
        setGames(gameData.data.games);
      }
    }
  }, [gameData.data, gameData.isPreviousData, gameData.isLoading]);

  return (
    <>
      <Head>
        <title>CanWeCoop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main} id="main">
        {!metaData.isLoading ? (
          !metaData.data?.error ? (
            <div className="container">
              <h1>We have a total of {metaData.data?.total} games!</h1>
              <section aria-label="search" className={styles.searchMenu}>
                <input
                  type="search"
                  defaultValue={query.name}
                  id="search"
                  name="search"
                  placeholder="Search"
                  className={styles.searchBar}
                  onChange={(e) => setQuery({ name: e.target.value, page: 1 })}
                />
                <button onClick={() => setShowFilter(!showFilter)}>
                  Filter
                </button>
              </section>

              <section
                className={`${styles.searchFilterContainer} ${
                  showFilter && styles.active
                }`}
              >
                <div>
                  <section aria-label="filter-pagesize">
                    <h2 id="filter-pagesize">Page size</h2>
                    <input
                      type="range"
                      name="size"
                      id="size"
                      value={query.size}
                      min={12}
                      max={48}
                      step={4}
                      onChange={(e) =>
                        setQuery({ size: Number(e.target.value) })
                      }
                    />
                  </section>
                  <section aria-labelledby="filter-categories">
                    <h2 id="filter-categories">Categories</h2>
                    <ul className={styles.gridBox}>
                      {metaData.data?.categories.map((category) => (
                        <li key={category.id}>
                          <label htmlFor={category.description}>
                            <input
                              type="checkbox"
                              id={category.description}
                              name={category.description}
                              checked={query.categories.includes(
                                category.description
                              )}
                              onChange={() =>
                                setQuery({
                                  categories: toggle(
                                    query.categories,
                                    category.description
                                  ),
                                })
                              }
                            />
                            {category.description}
                          </label>
                        </li>
                      ))}
                    </ul>
                  </section>

                  <section aria-labelledby="filter-genres">
                    <h2 id="filter-genres">Genres</h2>
                    <ul className={styles.gridBox}>
                      {metaData.data?.genres.map((genre) => (
                        <li key={genre.id}>
                          <label htmlFor={genre.description}>
                            <input
                              type="checkbox"
                              id={genre.description}
                              name={genre.description}
                              checked={query.genres.includes(genre.description)}
                              onChange={() =>
                                setQuery({
                                  genres: toggle(
                                    query.categories,
                                    genre.description
                                  ),
                                })
                              }
                            />
                            {genre.description}
                          </label>
                        </li>
                      ))}
                    </ul>
                  </section>

                  {user && user.friends?.length > 0 && (
                    <section aria-labelledby="filter-friends">
                      <h2 id="filter-friends">Friends</h2>
                      <ul className={styles.gridBox}>
                        {user.friends.map((friend) => (
                          <li key={friend.id}>
                            <label htmlFor={friend.id}>
                              <input
                                type="checkbox"
                                id={friend.id}
                                name={friend.displayName}
                                checked={query.friends.includes(friend.id)}
                                onChange={() =>
                                  setQuery({
                                    friends: toggle(
                                      query.categories,
                                      friend.id
                                    ),
                                  })
                                }
                              />
                              {friend.displayName}
                            </label>
                          </li>
                        ))}
                      </ul>
                    </section>
                  )}
                </div>
              </section>

              <GameGrid games={games} />

              <nav className={styles.paginationMenu}>
                <button
                  className="iconButton"
                  onClick={() => setQuery({ page: query.page - 1 })}
                  disabled={query.page <= 0}
                >
                  <ArrowLeft />
                </button>

                <button
                  className="iconButton"
                  onClick={() => setQuery({ page: query.page + 1 })}
                  disabled={query.page >= gameData.data?.meta.lastPage}
                >
                  <ArrowRight />
                </button>
              </nav>
            </div>
          ) : (
            <ApiError />
          )
        ) : (
          <></>
        )}
      </main>
    </>
  );
}
