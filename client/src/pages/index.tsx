import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useAuth } from "@/hooks";
import {
  NumberParam,
  StringParam,
  useQueryParams,
  withDefault,
} from "use-query-params";
import { ApiClient, CommaArrayParam, toggle } from "@/lib";
import { Game, Tag } from "@/types";
import { ApiError, GameCard } from "@/components";

import { GetServerSideProps } from "next";
import { useQuery } from "react-query";
import { useCallback, useState } from "react";

interface SSProps {
  categories: Tag[];
  genres: Tag[];
  total: number;
  error: boolean;
}

export const getServerSideProps: GetServerSideProps<SSProps> = async () => {
  const props: SSProps = {
    categories: [],
    genres: [],
    total: 0,
    error: false,
  };

  try {
    const res = await ApiClient.get("/game-info");
    props.categories = res.data["categories"];
    props.genres = res.data["genres"];
    props.total = res.data["total"];
  } catch (error) {
    console.warn(error);
    props.error = true;
  }

  return { props };
};

export default function Home(props: SSProps) {
  const { user } = useAuth();
  const [query, setQuery] = useQueryParams({
    name: withDefault(StringParam, ""),
    page: withDefault(NumberParam, 1),
    size: withDefault(NumberParam, 24),
    categories: withDefault(CommaArrayParam, [] as string[]),
    genres: withDefault(CommaArrayParam, [] as string[]),
    friends: withDefault(CommaArrayParam, [] as string[]),
  });
  const [showFilter, setShowFilter] = useState(false);

  const { data } = useQuery({
    queryKey: ["@games", query],
    queryFn: async () => {
      const baseUrl = "/games";
      const queryString = new URLSearchParams(query as any).toString();
      const res = await ApiClient.get(baseUrl + "?" + queryString);
      return { games: res.data.data, meta: res.data.meta };
    },
  });

  const toggleQueryParam = useCallback(
    (target: "category" | "genre" | "friends", value: string) => {
      if (target == "category") {
        setQuery({
          categories: toggle(query.categories, value),
        });
      } else if (target == "genre") {
        setQuery({
          genres: toggle(query.genres, value),
        });
      } else {
        setQuery({
          friends: toggle(query.friends, value),
        });
      }
    },
    [query, setQuery]
  );

  return (
    <>
      <Head>
        <title>CanWeCoop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main} id="main">
        {!props.error ? (
          <div className="container">
            <h1>We have a total of {props.total} games!</h1>
            <section aria-label="search" className={styles.searchMenu}>
              <input
                type="search"
                defaultValue={query.name}
                id="search"
                name="search"
                placeholder="Search"
                className={styles.searchBar}
                onChange={(e) => setQuery({ name: e.target.value, page: 1 })}
              />
              <button onClick={() => setShowFilter(!showFilter)}>Filter</button>
            </section>

            <section
              className={`${styles.searchFilterContainer} ${
                showFilter && styles.active
              }`}
            >
              <div>
                <section aria-label="filter-pagesize">
                  <h2 id="filter-pagesize">Page size</h2>
                  <input
                    type="range"
                    name="size"
                    id="size"
                    value={query.size}
                    min={12}
                    max={48}
                    step={4}
                    onChange={(e) => setQuery({ size: Number(e.target.value) })}
                  />
                </section>
                <section aria-labelledby="filter-categories">
                  <h2 id="filter-categories">Categories</h2>
                  <ul className={styles.gridBox}>
                    {props.categories.map((category) => (
                      <li key={category.id}>
                        <label htmlFor={category.description}>
                          <input
                            type="checkbox"
                            id={category.description}
                            name={category.description}
                            checked={query.categories.includes(
                              category.description
                            )}
                            onChange={() =>
                              toggleQueryParam("category", category.description)
                            }
                          />
                          {category.description}
                        </label>
                      </li>
                    ))}
                  </ul>
                </section>

                <section aria-labelledby="filter-genres">
                  <h2 id="filter-genres">Genres</h2>
                  <ul className={styles.gridBox}>
                    {props.genres.map((genre) => (
                      <li key={genre.id}>
                        <label htmlFor={genre.description}>
                          <input
                            type="checkbox"
                            id={genre.description}
                            name={genre.description}
                            checked={query.genres.includes(genre.description)}
                            onChange={() =>
                              toggleQueryParam("genre", genre.description)
                            }
                          />
                          {genre.description}
                        </label>
                      </li>
                    ))}
                  </ul>
                </section>

                {user && user.friends?.length > 0 && (
                  <section aria-labelledby="filter-friends">
                    <h2 id="filter-friends">Friends</h2>
                    <ul className={styles.gridBox}>
                      {user.friends.map((friend) => (
                        <li key={friend.id}>
                          <label htmlFor={friend.id}>
                            <input
                              type="checkbox"
                              id={friend.id}
                              name={friend.displayName}
                              checked={query.friends.includes(friend.id)}
                              onChange={() =>
                                toggleQueryParam("friends", friend.id)
                              }
                            />
                            {friend.displayName}
                          </label>
                        </li>
                      ))}
                    </ul>
                  </section>
                )}
              </div>
            </section>
            <ul className={styles.gameGrid}>
              {data?.games?.map((game: Game, index: number) => (
                <GameCard key={game.id} game={game} index={index} />
              ))}
            </ul>
          </div>
        ) : (
          <ApiError />
        )}
      </main>
    </>
  );
}
